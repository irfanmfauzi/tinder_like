// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "tinder_like/internal/model/entity"

	mock "github.com/stretchr/testify/mock"

	repository "tinder_like/internal/repository"

	request "tinder_like/internal/model/request"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// FindUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepo) FindUserByEmail(ctx context.Context, email string) (entity.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: ctx, tx, registerRequest
func (_m *UserRepo) InsertUser(ctx context.Context, tx repository.TxProvider, registerRequest request.RequestRegister) (int64, error) {
	ret := _m.Called(ctx, tx, registerRequest)

	if len(ret) == 0 {
		panic("no return value specified for InsertUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxProvider, request.RequestRegister) (int64, error)); ok {
		return rf(ctx, tx, registerRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxProvider, request.RequestRegister) int64); ok {
		r0 = rf(ctx, tx, registerRequest)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.TxProvider, request.RequestRegister) error); ok {
		r1 = rf(ctx, tx, registerRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
